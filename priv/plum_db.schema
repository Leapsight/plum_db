


%% @doc Each partition first stores new key/value data in a memory based
%% write buffer. This write buffer is in parallel to the recovery log
%% mentioned in the "sync" parameter. PDB creates each partition with a
%% randomly sized write_buffer_size for performance reasons. The random
%% size is somewhere between write_buffer_size_min and
%% write_buffer_size_max.
%% @see leveldb.sync
{mapping, "db.write_buffer_size_min", "rocksdb.open.write_buffer_size_min", [
{default, "32MB"},
{datatype, bytesize},
hidden
]}.

%% @see db.write_buffer_size_min
{mapping, "db.write_buffer_size_max", "rocksdb.open.write_buffer_size_max", [
{default, "64MB"},
{datatype, bytesize},
hidden
]}.


%% @doc Whether Rocksdb will flush after every write. Note: If you are
%% familiar with fsync, this is analagous to calling fsync after every
%% write.
{mapping, "db.sync_on_write", "rocksdb.open.sync", [
  {default, off},
  {datatype, flag},
  hidden
]}.


%% @doc Each database .sst table file can include an optional "bloom
%% filter" that is highly effective in shortcutting data queries that
%% are destined to not find the requested key. The Bloom filter
%% typically increases the size of an .sst table file by about
%% 2%.
{mapping, "db.bloomfilter", "eleveldb.open.block_based_table_options.bloom_filter_policy", [
  {default, 10},
  {datatype, integer},
  hidden
]}.


%% @doc Defines the size threshold for a block / chunk of data within
%% one .sst table file. Each new block gets an index entry in the .sst
%% table file's master index.
{mapping, "db.block.size", "rocksdb.open.block_size", [
  {default, "4KB"},
  {datatype, bytesize},
  hidden
]}.


%% @doc Enables or disables the verification of the data fetched from
%% LevelDB against internal checksums.
{mapping, "db.verify_checksums", "rocksdb.read.verify_checksums", [
  {default, on},
  {datatype, flag},
  hidden
]}.


%% @doc The number of worker threads performing LevelDB operations.
{mapping, "db.threads", "rocksdb.open.total_threads", [
  {default, 3},
  {datatype, integer},
  hidden
]}.



%% @doc Enables or disables the compression of data on disk.
%% Enabling (default) saves disk space.  Disabling may reduce read
%% latency but increase overall disk activity.  Option can be
%% changed at any time, but will not impact data on disk until
%% next time a file requires compaction.
{mapping, "db.compression", "rocksdb.open.compression", [
  {default, lz4},
  {datatype, {enum, [snappy, lz4, none]}}
]}.




%% =============================================================================
%% DEPRECATED
%% =============================================================================

